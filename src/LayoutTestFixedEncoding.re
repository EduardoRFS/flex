/*
 * vim: set ft=rust:
 * vim: set ft=reason:
 */
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * @Generated by gentest/gentest.sh with the following input
 *
{"testName":{"style":{"paddingStart":4800,"paddingEnd":4800,"width":140800,"flexDirection":"Row"},"children":{"child0":{"style":{"width":16000}},"child1":{"style":{"minHeight":0,"flexDirection":"Row","flexGrow":"1"},"children":{"child0":{"style":{"flexGrow":"1"}}}}}}}
 *
 */

let floatMult = ( *. );
let floatDiv = (/.);
let floatSub = (-.);
let module Node = {type context = unit; let nullContext = ();};
let module Encoding = FixedEncoding;
let module LayoutTestUtils = LayoutTestUtils.Create Node Encoding;
let module Layout = Layout.Create Node Encoding;
module LayoutSupport = Layout.LayoutSupport;
open LayoutTestUtils;
open Encoding;
let testName = "testName";
/**
 * Since Core_bench is such a huge dependency and it doesn't compile with byte,
 * we include a fake shim of it that we enable by default. To use the far
 * superior Core_bench.
 *
 * - Comment out `include FakeCore;` below.
 * - Uncomment `open Core_bench.Std;`
 * - Delete the two targets in package.json (byteTarget, jsTarget)
 * - Run `npm run build`, then `npm run bench`
 *
 */
let module FakeCore = {
  let module Bench = {
    let module Test = {
      let create name::s itm => (s, itm);
    };
    let make_command listofCreatedBenchmarks => listofCreatedBenchmarks;
  };
  let module Core = {
    let runCommand (name, func) => {
      let numIterations = 100;
      let timesInMs = Array.make_float numIterations;
      Gc.full_major ();
      let startSeconds = Sys.time ();
      for i in 0 to (numIterations - 1) {
        let itemStartSeconds = Sys.time ();
        func ();
        let itemEndSeconds = Sys.time ();
        timesInMs.(i) = floatSub itemEndSeconds itemStartSeconds
      };
      let endSeconds = Sys.time ();
      print_string (
        "Average ms for " ^
        name ^
        " " ^
        string_of_float (
          floatMult 1000.0 (floatDiv (floatSub endSeconds startSeconds) (float_of_int numIterations))
        )
      );
      print_newline ();
      Array.sort compare timesInMs;
      print_string (
        "Median ms for " ^ name ^ " " ^ string_of_float (floatMult 1000.0 timesInMs.(numIterations / 2)) ^ " (Not Valid For JS benchmarks)"
      );
      print_newline ()
    };
    let module Std = {
      let module Command = {
        let run listOftests => List.iter (fun command => runCommand command) listOftests;
      };
    };
  };
};

include FakeCore;

/* open Core_bench.Std; */



if (LayoutTestUtils.runMode === Bench) {
  if LayoutTestUtils.shouldBenchmarkAllAsOne {
    Core.Std.Command.run (Bench.make_command [Bench.Test.create name::"all-benchmarks" (fun()=>{
      /* testName */
          let root_style = {
  ...LayoutSupport.defaultStyle,
  paddingStart: 4800,
  paddingEnd: 4800,
  width: 140800,
  flexDirection: Row,
};

let root_child0_style = {
  ...LayoutSupport.defaultStyle,
  width: 16000,
};
let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();

let root_child1_style = {
  ...LayoutSupport.defaultStyle,
  minHeight: 0,
  flexDirection: Row,
  flexGrow: 1,
};

let root_child1_child0_style = {
  ...LayoutSupport.defaultStyle,
  flexGrow: 1,
};
let root_child1_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_child0_style ();
let root_child1 = LayoutSupport.createNode withChildren::[|root_child1_child0|] andStyle::root_child1_style ();
let root = LayoutSupport.createNode withChildren::[|root_child0,root_child1|] andStyle::root_style ();
          Layout.layoutNode root cssUndefined cssUndefined Ltr;
          Layout.layoutNode root cssUndefined cssUndefined Rtl;
    })]);
  } else {
     let bench_testName () => {
        let root_style = {
  ...LayoutSupport.defaultStyle,
  paddingStart: 4800,
  paddingEnd: 4800,
  width: 140800,
  flexDirection: Row,
};

let root_child0_style = {
  ...LayoutSupport.defaultStyle,
  width: 16000,
};
let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();

let root_child1_style = {
  ...LayoutSupport.defaultStyle,
  minHeight: 0,
  flexDirection: Row,
  flexGrow: 1,
};

let root_child1_child0_style = {
  ...LayoutSupport.defaultStyle,
  flexGrow: 1,
};
let root_child1_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_child0_style ();
let root_child1 = LayoutSupport.createNode withChildren::[|root_child1_child0|] andStyle::root_child1_style ();
let root = LayoutSupport.createNode withChildren::[|root_child0,root_child1|] andStyle::root_style ();
        Layout.layoutNode root cssUndefined cssUndefined Ltr;
        Layout.layoutNode root cssUndefined cssUndefined Rtl;
    };
      let benchmarks = [];
      let benchmarks = LayoutTestUtils.shouldRun testName ?
        [
          Bench.Test.create name::testName
          bench_testName,
          ...benchmarks
        ] :
        benchmarks;
    Core.Std.Command.run (Bench.make_command benchmarks);
  }
} else {
    it testName (fun () => {
      let root_style = {
  ...LayoutSupport.defaultStyle,
  paddingStart: 4800,
  paddingEnd: 4800,
  width: 140800,
  flexDirection: Row,
};

let root_child0_style = {
  ...LayoutSupport.defaultStyle,
  width: 16000,
};
let root_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child0_style ();

let root_child1_style = {
  ...LayoutSupport.defaultStyle,
  minHeight: 0,
  flexDirection: Row,
  flexGrow: 1,
};

let root_child1_child0_style = {
  ...LayoutSupport.defaultStyle,
  flexGrow: 1,
};
let root_child1_child0 = LayoutSupport.createNode withChildren::[||] andStyle::root_child1_child0_style ();
let root_child1 = LayoutSupport.createNode withChildren::[|root_child1_child0|] andStyle::root_child1_style ();
let root = LayoutSupport.createNode withChildren::[|root_child0,root_child1|] andStyle::root_style ();
      Layout.layoutNode root cssUndefined cssUndefined Ltr;
    
      if (root.layout.top != 0 || root.layout.left != 0 || root.layout.width != 140800 || root.layout.height != 0 ||
root_child0.layout.top != 0 || root_child0.layout.left != 4800 || root_child0.layout.width != 16000 || root_child0.layout.height != 0 ||
root_child1.layout.top != 0 || root_child1.layout.left != 20800 || root_child1.layout.width != 115200 || root_child1.layout.height != 0 ||
root_child1_child0.layout.top != 0 || root_child1_child0.layout.left != 0 || root_child1_child0.layout.width != 115200 || root_child1_child0.layout.height != 0) {
    assertLayouts 0 ({...root.layout, top:0, left: 0, width: 140800, height: 0}, root.layout)
[
  ({...root_child0.layout, top:0, left: 4800, width: 16000, height: 0}, root_child0.layout),
  ({...root_child1.layout, top:0, left: 20800, width: 115200, height: 0}, root_child1.layout),
]
;



assertLayouts 1 ({...root_child1.layout, top:0, left: 20800, width: 115200, height: 0}, root_child1.layout)
[
  ({...root_child1_child0.layout, top:0, left: 0, width: 115200, height: 0}, root_child1_child0.layout),
]
;


  };
    
      Layout.layoutNode root cssUndefined cssUndefined Rtl;
    
      if (root.layout.top != 0 || root.layout.left != 0 || root.layout.width != 140800 || root.layout.height != 0 ||
root_child0.layout.top != 0 || root_child0.layout.left != 120000 || root_child0.layout.width != 16000 || root_child0.layout.height != 0 ||
root_child1.layout.top != 0 || root_child1.layout.left != 4800 || root_child1.layout.width != 115200 || root_child1.layout.height != 0 ||
root_child1_child0.layout.top != 0 || root_child1_child0.layout.left != 0 || root_child1_child0.layout.width != 115200 || root_child1_child0.layout.height != 0) {
    assertLayouts 2 ({...root.layout, top:0, left: 0, width: 140800, height: 0}, root.layout)
[
  ({...root_child0.layout, top:0, left: 120000, width: 16000, height: 0}, root_child0.layout),
  ({...root_child1.layout, top:0, left: 4800, width: 115200, height: 0}, root_child1.layout),
]
;



assertLayouts 3 ({...root_child1.layout, top:0, left: 4800, width: 115200, height: 0}, root_child1.layout)
[
  ({...root_child1_child0.layout, top:0, left: 0, width: 115200, height: 0}, root_child1_child0.layout),
]
;


  };
    });
    
      LayoutTestUtils.displayOutcomes ();
};